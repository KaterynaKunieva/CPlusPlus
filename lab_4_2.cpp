#include <iostream>
using namespace std;

int main()
{
	int num = 0; //к≥льк≥сть елемент≥в масиву, поки користувач не ув≥в його розм≥рн≥сть
	int flag = 0; //знак того, що нуль знайдений
	int dob = 1; //добуток цифр м≥ж нул€ми
	int k = 0;//зм≥нна, €ка буде = 1, €кщо к≥льк≥сть елемент≥в масиву непарна (к≥льк≥сть елемент≥в на непарних м≥сц€х буде на 1 б≥льше), ≥ залишитьс€ 0 - €кщо парна
	int even = 0, odd = 0; // ≥ндекси дл€ парного масиву ≥ непарного
	int maxI, i; //≥ндекс максимального та ≥ндекс
	double element, max; //елемент масиву, максимальний елемент
	while (num == 0) //користувач вводить розм≥рн≥сть, в≥дм≥нну в≥д 0
	{
		cout << "Enter integer value doesn`t equal 0: ";
		cin >> num;
	}
	int* arr = new int[num]; // ¬ид≥л€Їмо пам'€ть дл€ масиву
	cout << "Enter element: " << endl; // заповнюЇмо масив
	for (i = 0; i < num; i++)
	{
		cout << "Element " << i + 1 << ": ";
		cin >> element;
		*(arr+i) = element;
	}
	for (i = 0; i < num; i++) //виводимо отриманий масив
	{
		cout << *(arr+i) << ", ";
	}
	max = *arr; //привласнюЇмо максимуму перший елемент
	for (i = 1; i < num; i++) //шукаЇмо максимальний елемент 
	{
		if (*(arr+i) > max) 
		{
			max = *(arr+i);
		}
	}
	for (i = 0; i < num; i++) //шукаЇмо ≥ндекси максимальних елемент≥в
	{
		if (*(arr+i) == max)
		{
			cout << endl << "Number of maximum = " << i + 1 << endl;
		}
	}
	for (i = 0; i < num; i++) //шукаЇмо нул≥
	{
		if (*(arr+i) == 0 && flag == 0) //елемент = 0 (знайшли 0), знак = 0 (до цього нул≥в не було)
		{
			if (*(arr+i+1) == 0) // наступний елемент п≥сл€ 0 - теж 0 
			{
				dob = 0;
				cout << "There are no numbers between nulls" << endl;
				break;
			}
			flag = 1; // знайшли перший 0, ставимо знак = 1
		}
		else if (*(arr+i) != 0 && flag == 1) //елемент не дор≥внюЇ 0, перший 0 знайдений 
		{
			dob = dob * (*(arr+i)); //перемножаЇмо вс≥ числа, поки елементи не дор≥внюють 0 
		}
		else if (*(arr+i) == 0 && flag == 1) //нульовий елемент, флаг=1 показуЇ, що перший нуль був вже знайдений 
		{
			flag = 2;//отже ставимо флаг = 2, €к знак того, що ми знайшли другий нуль
		}
	}
	if (dob != 0 && flag == 2) cout << endl << "dob = " << dob << endl; //знайшли 2 нул€, м≥ж ними Ї числа
	else if (flag == 0 && dob != 0) cout << "No nulls" << endl; //не знайшли жодного нул€
	else if (flag == 1) cout << "No enough nulls" << endl;//Ї т≥льки 1 нуль
	//ѕеретворюЇмо масив таким чином, щоб в перш≥й половин≥ розташовувались елементи, що сто€ли в непарних позиц≥€х, а у друг≥й Ц що сто€ли в парних позиц≥€х.
	if (num % 2 != 0) k = 1;
	int* array_even = new int[(num / 2)];
	int* array_odd = new int[(num / 2) + k];
	for (i = 0; i < num; i++)//розпод≥л€Їмо елементи основного масиву на 2 ≥нших масиви в залежност≥ в≥д њх ≥ндекс≥в
	{
		if ((i + 1) % 2 == 0) //додаЇмо 1, щоб користувачу було зручн≥ше розум≥ти, де €кий елемент (нумерац≥€ дл€ нього з 1)
		{
			*(array_even + even) = *(arr+i);//дл€ парних	
			even++;
		}
		else//дл€ непарних
		{
			*(array_odd + odd) = *(arr + i); //array_odd[odd] 
			odd++;
		}
	}
	for (i = 0; i < odd; i++)//елементи на непарних м≥сц€х повертаЇмо в основний масив
	{
		*(arr+i) = *(array_odd+i); 
	}
	for (i = 0; i < even; i++)//елементи на парних м≥сц€х повертаЇмо в основний масив п≥сл€ непарних
	{
		*(arr+i + odd) = *(array_even+i); 
	}
	for (i = 0; i < num; i++)//виводимо масив
	{
		cout << *(arr+i) << ", "; 
	}
	delete[] arr; // очистка пам'€т≥
	delete[] array_even;
	delete[] array_odd;
	return 0;
}